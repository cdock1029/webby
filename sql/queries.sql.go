// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package sql

import (
	"context"
)

const createProperty = `-- name: CreateProperty :one
INSERT INTO properties (name)
VALUES($1)
RETURNING id, name
`

func (q *Queries) CreateProperty(ctx context.Context, name string) (Property, error) {
	row := q.db.QueryRowContext(ctx, createProperty, name)
	var i Property
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteProperty = `-- name: DeleteProperty :exec
DELETE from properties
WHERE id = $1
`

func (q *Queries) DeleteProperty(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProperty, id)
	return err
}

const getProperty = `-- name: GetProperty :one
SELECT id, name
from properties
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProperty(ctx context.Context, id int32) (Property, error) {
	row := q.db.QueryRowContext(ctx, getProperty, id)
	var i Property
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listProperties = `-- name: ListProperties :many
SELECT id, name
from properties
order by name
`

func (q *Queries) ListProperties(ctx context.Context) ([]Property, error) {
	rows, err := q.db.QueryContext(ctx, listProperties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Property
	for rows.Next() {
		var i Property
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProperty = `-- name: UpdateProperty :one
UPDATE properties
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdatePropertyParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, updateProperty, arg.ID, arg.Name)
	var i Property
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
